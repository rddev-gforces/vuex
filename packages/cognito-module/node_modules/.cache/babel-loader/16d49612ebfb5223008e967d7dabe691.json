{"remainingRequest":"/Users/martyn.race/Documents/vuex/packages/cognito-module/node_modules/thread-loader/dist/cjs.js!/Users/martyn.race/Documents/vuex/packages/cognito-module/node_modules/babel-loader/lib/index.js!/Users/martyn.race/Documents/vuex/packages/cognito-module/node_modules/eslint-loader/index.js??ref--13-0!/Users/martyn.race/Documents/vuex/packages/cognito-module/src/actions.js","dependencies":[{"path":"/Users/martyn.race/Documents/vuex/packages/cognito-module/src/actions.js","mtime":1572630468917},{"path":"/Users/martyn.race/Documents/vuex/packages/cognito-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/martyn.race/Documents/vuex/packages/cognito-module/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/martyn.race/Documents/vuex/packages/cognito-module/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/martyn.race/Documents/vuex/packages/cognito-module/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Auth from '@aws-amplify/auth';\nimport Amplify from '@aws-amplify/core';\nexport default {\n  fetchSession: ({\n    commit\n  }) => new Promise((resolve, reject) => {\n    Auth.currentSession().then(session => {\n      Auth.currentUserPoolUser().then(user => {\n        commit('setUser', user);\n        resolve(session);\n      }).catch(reject);\n    }).catch(reject);\n  }),\n  fetchJwtToken: ({\n    commit\n  }) => new Promise((resolve, reject) => {\n    Auth.currentSession().then(session => {\n      resolve(session.getAccessToken().getJwtToken());\n    }).catch(reject);\n  }),\n  signInUser: ({\n    commit\n  }, credentials) => new Promise((resolve, reject) => {\n    Auth.signIn(credentials.username, credentials.password).then(user => {\n      commit('setUser', user);\n      resolve(user);\n    }).catch(reject);\n  }),\n  answerCustomChallenge: ({\n    commit\n  }, credentials) => new Promise((resolve, reject) => {\n    Auth.sendCustomChallengeAnswer(credentials.user, credentials.answer).then(user => {\n      commit('setUser', user);\n      resolve(user);\n    }).catch(reject);\n  }),\n  registerUser: ({\n    commit\n  }, credentials) => new Promise((resolve, reject) => {\n    // TODO: Ensure I'm attribute agnostic\n    Auth.signUp({\n      username: credentials.username,\n      password: credentials.password,\n      attributes: credentials.attributes\n    }).then(user => {\n      commit('setUser', user);\n      resolve(user);\n    }).catch(reject);\n  }),\n  confirmUser: (_, data) => new Promise((resolve, reject) => {\n    Auth.confirmSignUp(data.username, data.code).then(resolve).catch(reject);\n  }),\n  resendConfirmation: (_, data) => new Promise((resolve, reject) => {\n    Auth.resendSignUp(data.username).then(resolve).catch(reject);\n  }),\n  forgotPassword: (_, data) => new Promise((resolve, reject) => {\n    Auth.forgotPassword(data.username).then(resolve).catch(reject);\n  }),\n  changePassword: (_, data) => new Promise((resolve, reject) => {\n    Auth.forgotPasswordSubmit(data.username, data.code, data.newPassword).then(resolve).catch(reject);\n  }),\n  signOut: ({\n    commit,\n    getters\n  }) => new Promise((resolve, reject) => {\n    if (!getters.isLoggedIn) {\n      reject(new Error('User not logged in.'));\n    }\n\n    Auth.signOut().then(result => {\n      commit('setUser', {});\n      resolve(result);\n    }).catch(reject);\n    if (localStorage) localStorage.removeItem('USER');\n  }),\n\n  init({\n    commit\n  }, config) {\n    if (!['userPoolId', 'userPoolWebClientId', 'region'].every(opt => Boolean(config[opt]))) {\n      throw new Error('userPoolId, userPoolWebClientId and region are required in the config object.');\n    }\n\n    Amplify.configure({\n      Auth: config\n    });\n  }\n\n};",{"version":3,"sources":["/Users/martyn.race/Documents/vuex/packages/cognito-module/src/actions.js"],"names":["Auth","Amplify","fetchSession","commit","Promise","resolve","reject","currentSession","then","session","currentUserPoolUser","user","catch","fetchJwtToken","getAccessToken","getJwtToken","signInUser","credentials","signIn","username","password","answerCustomChallenge","sendCustomChallengeAnswer","answer","registerUser","signUp","attributes","confirmUser","_","data","confirmSignUp","code","resendConfirmation","resendSignUp","forgotPassword","changePassword","forgotPasswordSubmit","newPassword","signOut","getters","isLoggedIn","Error","result","localStorage","removeItem","init","config","every","opt","Boolean","configure"],"mappings":"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","sourcesContent":["import Auth from '@aws-amplify/auth'\nimport Amplify from '@aws-amplify/core'\n\nexport default {\n  fetchSession: ({ commit }) =>\n    new Promise((resolve, reject) => {\n      Auth.currentSession().then(session => {\n        Auth.currentUserPoolUser()\n          .then(user => {\n            commit('setUser', user)\n\n            resolve(session)\n          }).catch(reject)\n      }).catch(reject)\n    }),\n  fetchJwtToken: ({ commit }) =>\n    new Promise((resolve, reject) => {\n      Auth.currentSession().then(session => {\n        resolve(session.getAccessToken().getJwtToken())\n      }).catch(reject)\n    }),\n  signInUser: ({ commit }, credentials) =>\n    new Promise((resolve, reject) => {\n      Auth.signIn(credentials.username, credentials.password).then((user) => {\n        commit('setUser', user)\n\n        resolve(user)\n      }).catch(reject)\n    }),\n  answerCustomChallenge: ({ commit }, credentials) =>\n    new Promise((resolve, reject) => {\n      Auth.sendCustomChallengeAnswer(credentials.user, credentials.answer).then((user) => {\n        commit('setUser', user)\n\n        resolve(user)\n      }).catch(reject)\n    }),\n  registerUser: ({ commit }, credentials) =>\n    new Promise((resolve, reject) => {\n      // TODO: Ensure I'm attribute agnostic\n      Auth.signUp({\n        username: credentials.username,\n        password: credentials.password,\n        attributes: credentials.attributes\n      }).then(user => {\n        commit('setUser', user)\n\n        resolve(user)\n      }).catch(reject)\n    }),\n  confirmUser: (_, data) =>\n    new Promise((resolve, reject) => {\n      Auth.confirmSignUp(data.username, data.code)\n        .then(resolve)\n        .catch(reject)\n    }),\n  resendConfirmation: (_, data) =>\n    new Promise((resolve, reject) => {\n      Auth.resendSignUp(data.username)\n        .then(resolve)\n        .catch(reject)\n    }),\n  forgotPassword: (_, data) =>\n    new Promise((resolve, reject) => {\n      Auth.forgotPassword(data.username)\n        .then(resolve)\n        .catch(reject)\n    }),\n  changePassword: (_, data) =>\n    new Promise((resolve, reject) => {\n      Auth.forgotPasswordSubmit(\n        data.username,\n        data.code,\n        data.newPassword\n      )\n        .then(resolve)\n        .catch(reject)\n    }),\n  signOut: ({ commit, getters }) =>\n    new Promise((resolve, reject) => {\n      if (!getters.isLoggedIn) {\n        reject(new Error('User not logged in.'))\n      }\n\n      Auth.signOut()\n        .then(result => {\n          commit('setUser', {})\n\n          resolve(result)\n        })\n        .catch(reject)\n\n      if (localStorage) localStorage.removeItem('USER')\n    }),\n  init ({ commit }, config) {\n    if (![\n      'userPoolId',\n      'userPoolWebClientId',\n      'region'\n    ].every(opt => Boolean(config[opt]))) {\n      throw new Error('userPoolId, userPoolWebClientId and region are required in the config object.')\n    }\n\n    Amplify.configure({ Auth: config })\n  }\n}\n"]}]}